{"version":3,"sources":["../src/index.js"],"names":["VectorGrid","VectorGridDefault","map","vt_label_province","L","featureGroup","labelcount","province","circleLoad","defaultData","choroplethData","id","count","provinceDefaultStyle","fillColor","fillOpacity","weight","opacity","color","fill","VectorGridComponent","props","state","provinceCounts","provinceCenters","choroplethTitle","grade","legendColors","vectorGridRef","React","createRef","infoDivRef","getLegendColor","value","colorArray","legendColor","length","j","changeGrades","range","data","colorArrayLength","gradeCount","legendDivisions","fullRange","divisions","fullData","push","data1","max","Math","apply","Object","values","min","setState","setTimeout","ChangeLegendColors","setChoroplethStyle","choroplethColor","undefined","choroplethColors","layer","newStyle","newStyle1","style","assign","setFeatureStyle","getShortNumbers","n","d","x","p","pow","round","label","current","leafletElement","mapRef","feature","properties","i","Centroid_X","Centroid_Y","PROV_NAME","on","e","addMouseoverLayer","infoDiv","display","provName","level","FIRST_PROV","FIRST_DISTRICT","provinceId","html","Name","District","toLowerCase","innerHTML","addLayer","prevProps","prevState","provinceUrl","vectorGridUrl","options","type","getFeatureId","url","vectorTileLayerStyles","Province","subdomains","key","title","createElement","Component"],"mappings":"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","file":"index.js","sourcesContent":["// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import App from './js/Components/App';\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Map, withLeaflet } from 'react-leaflet';\r\nimport VectorGridDefault from 'react-leaflet-vectorgrid';\r\n// import ScrollTab from './ScrollTab';\r\nconst VectorGrid = withLeaflet(VectorGridDefault);\r\nimport {label_Vector_Tiles, calculateRange, handleZoom, choroplethColorArray, getProvinceName} from \"./Functions\";\r\n// import './Developers_css/vectorgrid.css';\r\n\r\nvar map = {};\r\nvar vt_label_province = L.featureGroup();\r\nvar labelcount = 0;\r\nvar province;\r\nvar circleLoad = true;\r\n\r\nconst defaultData = {\r\n    choroplethData: [{id:1, count:1}, {id:2, count:2}, {id:3, count:3}, {id:4, count:4}, {id:5, count:5}, {id:6, count:6}, {id:7, count:7}],\r\n}\r\nvar provinceDefaultStyle = {\r\n    fillColor: \"white\",\r\n    fillOpacity: 0,\r\n    weight: 1.5,\r\n    opacity: 1,\r\n    color: \"#a3b7e3\",\r\n    fill: true\r\n  };\r\n  \r\n\r\nclass VectorGridComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            provinceCounts:[],\r\n            provinceCenters: [\r\n                [27.176469131898898, 87.220458984375],\r\n                [27.01998400798257, 85.6494140625],\r\n                [27.712710260887476, 85.36376953125001],\r\n                [28.362401735238237, 84.03442382812501],\r\n                [28.04289477256162, 82.78198242187501],\r\n                [29.15216128331894, 82.22167968750001],\r\n                [29.36302703778376, 80.97148437500001]\r\n              ],\r\n            choroplethTitle: \"dataCategory1\",\r\n            grade: [],\r\n            legendColors: []\r\n        };\r\n        this.vectorGridRef = React.createRef();\r\n        this.infoDivRef = React.createRef();\r\n    \r\n\r\n    this.getLegendColor = (value) =>{\r\n        var colorArray = this.props.colorArray;\r\n        var legendColor = colorArray!=null && colorArray.length>0?colorArray:this.state.legendColors;\r\n        var color = \"#f4f4f2\";\r\n        // console.log(colorArray, \"colorArray inside\")\r\n        this.state.grade.map((grade,j) => {\r\n            if(value>grade){\r\n                color = legendColor[j];\r\n            }\r\n        })\r\n        return color;\r\n    }\r\n\r\n    changeGrades = () =>{\r\n        var range = [];\r\n        var data = [];\r\n        \r\n        var colorArrayLength = this.props.colorArray && this.props.colorArray.length;\r\n        var gradeCount = this.props.legendDivisions!=null && typeof(this.props.legendDivisions) == \"number\" && this.props.legendDivisions <= 20 && this.props.legendDivisions >= colorArrayLength?this.props.legendDivisions:7; //set default gradecount\r\n        \r\n        var fullRange = this.props.divisions && this.props.divisions.length>0?this.props.divisions:[];\r\n        var fullData = this.props.choroplethData!=null && this.props.choroplethData.length>0?this.props.choroplethData:defaultData.choroplethData;\r\n        \r\n        this.props.choroplethData!=null && this.props.choroplethData.length>0?this.props.choroplethData.map(data1 => {\r\n            data.push(data1.count);\r\n        }):defaultData.choroplethData.map(data1 => {\r\n            data.push(data1.count);//if no dat passed take from default data\r\n        })\r\n\r\n            // console.log(data, \"data new\")\r\n            var max = Math.max.apply(null, Object.values(data));\r\n            var min = 0;//Math.min(...data);\r\n            // console.log(max, \"max\")\r\n            // console.log(min, \"min\")\r\n            range = (max-min)/(gradeCount-1)<1?[0,2,4,6,8,10,12]:calculateRange(min, max, (max-min)/(gradeCount-1));\r\n            // console.log(range, \"range\")\r\n            this.setState({grade:fullRange.length>0?fullRange:range}) //add grade provided from props if available\r\n            \r\n            setTimeout(() => {\r\n                this.ChangeLegendColors();\r\n                this.setChoroplethStyle(province, fullData);\r\n            }, 200);\r\n    }\r\n    ChangeLegendColors = () =>{\r\n        var choroplethColor = this.props.color;\r\n        var color = choroplethColor!=undefined && choroplethColor.length>0?choroplethColor:\"#ff0000\";\r\n        var data = this.state.grade;\r\n        var choroplethColors = choroplethColorArray(data.length, color);\r\n        // console.log(choroplethColors, \"legendcolors\")\r\n        this.setState({legendColors:choroplethColors})\r\n            \r\n    }\r\n\r\n    setChoroplethStyle = (layer, values) =>{\r\n        values.map((value) => {\r\n            var color = this.getLegendColor(value.count);\r\n            var newStyle= {};\r\n            var newStyle1 = this.props.style && this.props.style != null?this.props.style:provinceDefaultStyle;\r\n            Object.assign(newStyle, newStyle1)\r\n            newStyle.fillColor = color;\r\n            newStyle.fillOpacity = 0.7;\r\n            // console.log(color, \"color\")\r\n            // console.log(newStyle, \"newStyle\")\r\n            setTimeout(() => {\r\n                layer.setFeatureStyle(value.id, newStyle);\r\n            }, 100);\r\n        })\r\n    }\r\n\r\n    getShortNumbers = (n,d) =>{\r\n        var x=(''+n).length;\r\n        var p=Math.pow;\r\n        d=p(10,d)\r\n        x-=x%3\r\n        return Math.round(n*d/p(10,x))/d+\" kMGTPE\"[x/3]\r\n    }\r\n\r\n    label = () =>{\r\n        province = this.vectorGridRef.current.leafletElement;\r\n            map = this.props.mapRef.current.leafletElement;\r\n            if(circleLoad == true){\r\n                var feature = {properties:{}}\r\n                this.state.provinceCenters.map((data, i) => {\r\n                    feature.properties.id = i;\r\n                    feature.properties.Centroid_X = data[1];\r\n                    feature.properties.Centroid_Y = data[0];\r\n                    feature.properties.PROV_NAME = null;\r\n                    if(this.props.label && this.props.label == true){\r\n                        label_Vector_Tiles(feature, vt_label_province, labelcount, this.props.provinceCounts);\r\n                    }\r\n                })\r\n            }\r\n            map.on(\"zoomend\", (e)=>{\r\n                if(this.props.label && this.props.label == true){\r\n                    handleZoom(map, province, vt_label_province);\r\n                }\r\n            });\r\n            circleLoad = false;\r\n    }\r\n    \r\n    addMouseoverLayer = () =>{\r\n        province = this.vectorGridRef.current.leafletElement;\r\n        var infoDiv = this.infoDivRef.current;\r\n        map = this.props.mapRef.current.leafletElement;\r\n        province.on(\"mouseover\",(e)=>{\r\n            // console.log(e, \"ee\")\r\n            infoDiv.style.display = \"block\";\r\n            var provName = \"\";\r\n            // console.log(provName, \"provName\")\r\n            var level = \"\";\r\n            if(e.layer.properties.FIRST_PROV!=undefined && e.layer.properties.FIRST_PROV!=null){\r\n                level = \"province\";\r\n                provName = getProvinceName(e.layer.properties.id, \"en\")\r\n            }\r\n            else if(e.layer.properties.FIRST_DISTRICT!=undefined && e.layer.properties.FIRST_DISTRICT!=null){\r\n                level = \"district\"\r\n                provName = getProvinceName(e.layer.properties.provinceId, \"en\")\r\n            }\r\n            else {\r\n                level = \"municipality\"\r\n                provName = getProvinceName(e.layer.properties.provinceId, \"en\")\r\n            }\r\n            var html = `<div style=\"background: white;padding: 10px;\"><span><b>${\r\n                level == \"province\"?provName:level == \"district\"?e.layer.properties.FIRST_DISTRICT:e.layer.properties.Name\r\n              }</b></span>`; \r\n            html+= level != \"province\"?`,</br><span style=\"    text-transform: capitalize;\">${level==\"district\"?provName:e.layer.properties.District.toLowerCase()}`:\"\";\r\n            html+= level != \"province\" && level != \"district\"?`, ${provName}</span></div>`:\"\";\r\n            infoDiv.innerHTML = html;\r\n        });\r\n\r\n        province.on(\"mouseout\",(e)=>{\r\n            infoDiv.style.display = \"none\";\r\n            infoDiv.innerHTML = \"\";\r\n        })\r\n\r\n    }\r\n}\r\n    componentWillMount(){\r\n    \r\n    }\r\n\r\n    componentDidMount(){\r\n        map = this.props.mapRef.current.leafletElement;\r\n        province = this.vectorGridRef.current.leafletElement;\r\n        // console.log(province, \"refrefref\")\r\n        map.addLayer(vt_label_province);\r\n        this.changeGrades();\r\n        this.label();\r\n        this.addMouseoverLayer();\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){    \r\n    }\r\n\r\n    render() {\r\n        const provinceUrl = this.props.vectorGridUrl && this.props.vectorGridUrl != \"\" && typeof(this.props.vectorGridUrl) == \"string\"?this.props.vectorGridUrl:\"https://geoserver.naxa.com.np/geoserver/gwc/service/tms/1.0.0/Bipad:Province@EPSG%3A900913@pbf/{z}/{x}/{-y}.pbf\";\r\n        // console.log(provinceUrl,\"provinceUrl\")\r\n        var style = this.props.style && this.props.style != null?this.props.style:provinceDefaultStyle;\r\n        // console.log(this.props.style && this.props.style != null?this.props.style:provinceDefaultStyle, \"defaultstyle\")\r\n        const options = {\r\n            type: 'protobuf',\r\n            // tooltip: (feature) =>{\r\n            //     console.log(feature, \"feature  \")\r\n            // },\r\n            getFeatureId: function (feature) {\r\n                //console.log(feature, \"feature  \")\r\n                return feature.properties.id;\r\n            },\r\n            url: provinceUrl,\r\n            vectorTileLayerStyles: {Province: style},\r\n            subdomains: 'abcd',\r\n            key: 'abcdefghi01234567890',\r\n        };\r\n\r\n        const title = React.createElement('h1', {}, 'My First React Code');\r\n        return title;\r\n        // return (\r\n        //     <div>\r\n        //         <VectorGrid {...options} ref={this.vectorGridRef}></VectorGrid>\r\n        //         <div style={{position: \"absolute\", display: \"flex\", flexDirection: \"column\", zIndex: 1999, background: \"white\", padding: 5, bottom: 0, margin: 5}}>\r\n        //         <div>{this.props.choroplethTitle?this.props.choroplethTitle:\"Legend\"}</div>\r\n        //         <div class=\"map-legend\">\r\n        //                     {/* <ScrollTab changetheme={this.props.changetheme}/> */}\r\n        //                     <ul class=\"color-legend\">\r\n        //             {\r\n        //                 this.state.grade && this.state.grade.map((grade,i) => {\r\n        //                     var hideLastdiv = false;\r\n        //                     hideLastdiv= i == (this.state.grade.length-1)?true:false;\r\n        //                     var grade1 = grade<1000?grade.toString():this.getShortNumbers(grade,1);\r\n        //                     // uncomment this to add vertical legend\r\n        //                     // return <div><div style={{width:\"12px\", height:\"12px\", backgroundColor: this.getLegendColor(this.state.grade[i] + 1), border:\"solid 1px #e2e2e2\", display:\"inline-block\"}}></div> <span>{this.state.grade[i]} {this.state.grade[i + 1]?\"-\"+this.state.grade[i + 1]: \"+\"}</span></div>\r\n        //                     // uncomment this to add horizontal legend\r\n        //                     // return <div style={{display:\"inline-block\"}}><div style={{width:\"12px\", height:\"12px\", backgroundColor: this.getLegendColor(this.state.grade[i] + 1), border:\"solid 1px #e2e2e2\", display:\"inline-block\", marginLeft:\"5px\"}}></div> <span >{this.state.grade[i]} {this.state.grade[i + 1]?\"-\"+this.state.grade[i + 1]: \"+\"}</span></div>\r\n        //                     // uncomment this to add nice horizontal legend\r\n        //                     return (\r\n        //                         <li>\r\n        //                             <div style={{backgroundColor: hideLastdiv?\"transparent\":this.getLegendColor(grade+1)}} class=\"color color1\"></div>\r\n        //                             <span style={{marginLeft: grade1.trim().length==1?-2:grade1.trim().length==2?-8:-12}}>{grade1}</span>\r\n        //                         </li>\r\n        //                     )\r\n        //                 })\r\n        //             }\r\n        //                 </ul>\r\n        //             </div>\r\n        //         </div>\r\n        //         <div ref={this.infoDivRef} class=\"infoDiv\" style={{display:\"none\"}}></div>\r\n        //     </div>\r\n        // )\r\n    }\r\n}\r\nexport default VectorGridComponent;"]}